import jenkins.model.*
import hudson.model.*
import javaposse.jobdsl.plugin.*
import org.csanchez.jenkins.plugins.kubernetes.*
import java.nio.file.*

println "[üå±] Initial job DSL bootstrap process starting..."

Thread.start {
    println "[‚è≥] Jenkins startup in progress, waiting for services to come online..."
    sleep(30000)  // Allow Jenkins time to settle

    def jenkins = Jenkins.getInstanceOrNull()
    if (jenkins == null) {
        println("[‚ùå] Jenkins instance unavailable. Aborting job DSL init.")
        return
    }

    def seedJobName = "JobDSL-Seed"
    def existingJob = jenkins.getItem(seedJobName)

    if (existingJob != null) {
        println("[‚úîÔ∏è] Found existing seed job: '${seedJobName}', skipping creation.")
    } else {
        println("[üõ†Ô∏è] Creating fresh seed job: '${seedJobName}'...")

        def job = jenkins.createProject(FreeStyleProject, seedJobName)
        job.setDisplayName("Seed Job for Kubernetes Worker Pods")

        def dslScriptPath = "/var/jenkins_home/job-dsl.groovy"
        if (!new File(dslScriptPath).exists()) {
            println("[‚ö†Ô∏è] DSL script not found at: ${dslScriptPath}. Cannot proceed.")
            return
        }

        def dslScript = new File(dslScriptPath).text

        def dslBuilder = new ExecuteDslScripts()
        dslBuilder.setScriptText(dslScript)
        dslBuilder.setSandbox(true)

        job.buildersList.add(dslBuilder)
        job.save()

        println("[üì°] Scheduling first execution of seed job...")
        job.scheduleBuild2(0)

        println("[‚úÖ] Seed job '${seedJobName}' initialized and queued.")
    }
}
